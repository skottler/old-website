<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: startups | Sam Kottler]]></title>
  <link href="http://samkottler.com/blog/categories/startups/atom.xml" rel="self"/>
  <link href="http://samkottler.com/"/>
  <updated>2012-06-22T06:31:49-04:00</updated>
  <id>http://samkottler.com/</id>
  <author>
    <name><![CDATA[Sam Kottler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Technical Debt]]></title>
    <link href="http://samkottler.com/blog/2012/05/26/managing-technical-debt/"/>
    <updated>2012-05-26T13:11:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/05/26/managing-technical-debt</id>
    <content type="html"><![CDATA[<p><strong>This document will probably be in a state of perpetual change as my
experiences change.</strong></p>

<p>At this point I've been involved with around half a dozen startups. Each
and every one has had unique challenges that made the work interesting.
That said, the most sweeping commonatility was technical debt. It's
bound to happen given the kind of business and funding requirements
startups face. Here are some tips I've accrued over the past few years.</p>

<h3>1. Prevent debt</h3>

<p>Duh. This one should be obvious, but there is an interesting paradigm
where getting it done <strong>now</strong> suddendly becomes more important than
being able to improve the product or solution a short time from now.
Issues arise directly from the fact that some code is hacked together to
work as quickly as possible. Good technical managers know that being
able to add features down the road is just as important is shipping
today.</p>

<p>Finding an appropriate balance between well architected and factored
code is tough, though. It's usually not as easy to make a judgement call
when the "hacky" option takes substantially less time than the elegant
one. Move to the next step for cases when a sub-par solution is
required.</p>

<h3>2. Document problems</h3>

<p>One of the most important parts of being able to manage problems
throughout large (and rapidly growing) codebases is being able to
quickly visualize and recognize areas where the solution is workable,
but less than ideal. This <em>shouldn't</em> be "on line 37 there is a weird
use of ternaries". That is easy to factor out quickly. Architectural
problems are more important to control; small changes usually are fixed
most easily by the work of diligent programmers.</p>
]]></content>
  </entry>
  
</feed>
