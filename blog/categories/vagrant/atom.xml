<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vagrant | Sam Kottler]]></title>
  <link href="http://samkottler.com/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://samkottler.com/"/>
  <updated>2012-06-22T06:31:49-04:00</updated>
  <id>http://samkottler.com/</id>
  <author>
    <name><![CDATA[Sam Kottler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying to Vagrant with Capistrano]]></title>
    <link href="http://samkottler.com/blog/2012/04/17/deploying-to-vagrant-with-capistrano/"/>
    <updated>2012-04-17T13:24:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/17/deploying-to-vagrant-with-capistrano</id>
    <content type="html"><![CDATA[<h6>@tizzo, @sdboyer, and I have been talking about building a Vagrant-based environment for people to build new features for Drupal.org in a distributed way. This post is intended to be an explanation of how to separate configuration from code that should get deployed.</h6>

<p>For the purposes of this post, I am going to assume that your Vagrant configuration is all set. We are going to build on top of it.</p>

<p>First, create a <code>Gemfile</code> in the root of your project. The capistrano gem is the base for our deployment tool, capistrano-ext provides multi-stage (vagrant dev staging production) capability, and the colors gem provided "colorized" output.</p>

<p><code>ruby Gemfile
gem 'capistrano'
gem 'capistrano-ext'
gem 'capistrano_colors'
</code></p>

<p>Run <code>bundle install</code>.</p>

<p>Next, make the directory that will contain your capistrano deployment config.</p>

<pre><code>capify .
</code></pre>

<p>The directory structure is now configured for use:</p>

<p>``` bash
  Capfile
  config/</p>

<pre><code>deploy.rb
</code></pre>

<p>```</p>

<p>Add the following to load support for multistage and define the stages:</p>

<p><code>ruby deploy.rb
set :stages, %w(vagrant development staging production)
require 'capistrano/ext/multistage'
</code></p>

<p>Capistrano will be looking for a corresponding file in <code>config/deploy/#{name}.rb</code> for each stage. For example, <code>config/deploy/vagrant.rb</code> should contain the definitions and custom tasks for the vagrant stage.</p>

<p><code>ruby vagrant.rb
set :scm, :git
set :repository, "https://github.com/tizzo/Drupal.org-Git-Daemons.git"
set :port, `vagrant ssh-config | grep Port | awk '{ print $2 }'`
set :application, "twisted-ssh"
set :deploy_to, "/var/www/#{application}/#{stage}"
role :web, "localhost"
</code></p>

<p>Now run <code>cap vagrant deploy</code> to checkout the git repo into the correct location on the VM.</p>

<p>I'll be sure to add more info to this post over time, but this should provide a good jumping-off point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Brubeck and Quickness]]></title>
    <link href="http://samkottler.com/blog/2012/04/06/getting-started-with-brubeck-and-quickness/"/>
    <updated>2012-04-06T23:11:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/06/getting-started-with-brubeck-and-quickness</id>
    <content type="html"><![CDATA[<p>This post assumes that you already have <a href="http://github.com/mitchellh/vagrant">vagrant</a> installed.</p>

<p>Brubeck is a great Python web framework that is built atop Mongrel2, and hence ZeroMQ. It's incredibly powerful, but a little tough to install if you don't have experience compiling software. Thanks to a new project called <a href="http://github.com/j2labs/quickness">quickness</a> by the very awesome @j2labs, it's now possible to easily configure an environment just waiting for you to rock some Brubeck!</p>

<p>Let's get kickin':</p>

<ol>
<li><code>git clone https://github.com/j2labs/quickness.git</code></li>
<li><code>cd quickness</code></li>
<li><code>vagrant up</code></li>
<li><code>vagrant ssh</code></li>
</ol>


<p>We're now on our Ubuntu 10.04 64-bit VM. Quickness comes with a great little utility called <code>quick_install</code> to help compile and manage some great pieces of software, including Mongrel2, Nginx, MySQL, and ZeroMQ.</p>

<p>Run <code>quick_install brubeck</code> to install all of Brubeck's dependencies and watch the magic happen.</p>

<p>We're ready to go! Head over to <a href="http://brubeck.io/installing.html">the Brubeck installation page</a> to get started.</p>
]]></content>
  </entry>
  
</feed>
