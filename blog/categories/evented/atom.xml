<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: evented | Sam Kottler]]></title>
  <link href="http://samkottler.com/blog/categories/evented/atom.xml" rel="self"/>
  <link href="http://samkottler.com/"/>
  <updated>2012-07-02T14:46:27-04:00</updated>
  <id>http://samkottler.com/</id>
  <author>
    <name><![CDATA[Sam Kottler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[When deferrables can't be deferred]]></title>
    <link href="http://samkottler.com/blog/2012/04/22/when-deferrables-cant-be-deferred/"/>
    <updated>2012-04-22T14:44:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/22/when-deferrables-cant-be-deferred</id>
    <content type="html"><![CDATA[<p>I'm writing a microkernel in Python right now, which has led me to start exploring the way that other languages handle evented/concurrent programming. One of the most interesting projects doing this kind of thing is EventMachine. It's written in Ruby and has some similarities to Twisted, so I figured I would read up on it. What I found was, well, bad.</p>

<p>The concept of deferable methods is great - they are asynchronously returned and do a great job at things like API calls to third-party services. Here's an example:</p>

<p>```ruby
require 'rubygems'
require 'net/ssh'</p>

<p>class SSHWorker
  include EM::Deferrable</p>

<p>  def ssh_work</p>

<pre><code>20.times do |ssh|
  Net::SSH.start('host', 'user', :password =&gt; "password") do |ssh|
    output = ssh.exec!("hostname")
    ssh.exec("sed...") 
  end
end
set_deferred_status :succeeded
</code></pre>

<p>  end
```
This kind of thing totally makes sense to defer. It's impossible to know how long it will take to SSH into a machine over and over again. It would be really bad to block requests will SSH'ing into a machine 20 times.</p>

<p><code>ruby
EM.run do
  worker = SSHWorker.new
  worker.callback {p "Ready to rock!"}
  Thread.new {SSHWorker.ssh_work; EM.stop}
end
</code>
Now the work is being done in a new thread. Great, we aren't blocking anymore. But what about the front-end application that is your customers are viewing - does that rely on a successful response from the SSHWorker class in order to proceed? If it does, you're doing it wrong. Front-to-back asynchronous request handling is hard so it's key to be mindful of the fact that blocks don't always come from the backend workers.</p>
]]></content>
  </entry>
  
</feed>
