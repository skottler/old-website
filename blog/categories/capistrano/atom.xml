<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: capistrano | Sam Kottler]]></title>
  <link href="http://samkottler.com/blog/categories/capistrano/atom.xml" rel="self"/>
  <link href="http://samkottler.com/"/>
  <updated>2012-04-22T15:02:36-04:00</updated>
  <id>http://samkottler.com/</id>
  <author>
    <name><![CDATA[Sam Kottler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploying to Vagrant with Capistrano]]></title>
    <link href="http://samkottler.com/blog/2012/04/17/deploying-to-vagrant-with-capistrano/"/>
    <updated>2012-04-17T13:24:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/17/deploying-to-vagrant-with-capistrano</id>
    <content type="html"><![CDATA[<h6>@tizzo, @sdboyer, and I have been talking about building a Vagrant-based environment for people to build new features for Drupal.org in a distributed way. This post is intended to be an explanation of how to separate configuration from code that should get deployed.</h6>

<p>For the purposes of this post, I am going to assume that your Vagrant configuration is all set. We are going to build on top of it.</p>

<p>First, create a <code>Gemfile</code> in the root of your project. The capistrano gem is the base for our deployment tool, capistrano-ext provides multi-stage (vagrant dev staging production) capability, and the colors gem provided "colorized" output.</p>

<p><code>ruby Gemfile
gem 'capistrano'
gem 'capistrano-ext'
gem 'capistrano_colors'
</code></p>

<p>Run <code>bundle install</code>.</p>

<p>Next, make the directory that will contain your capistrano deployment config.</p>

<pre><code>capify .
</code></pre>

<p>The directory structure is now configured for use:</p>

<p>``` bash
  Capfile
  config/</p>

<pre><code>deploy.rb
</code></pre>

<p>```</p>

<p>Add the following to load support for multistage and define the stages:</p>

<p><code>ruby deploy.rb
set :stages, %w(vagrant development staging production)
require 'capistrano/ext/multistage'
</code></p>

<p>Capistrano will be looking for a corresponding file in <code>config/deploy/#{name}.rb</code> for each stage. For example, <code>config/deploy/vagrant.rb</code> should contain the definitions and custom tasks for the vagrant stage.</p>

<p><code>ruby vagrant.rb
set :scm, :git
set :repository, "https://github.com/tizzo/Drupal.org-Git-Daemons.git"
set :port, `vagrant ssh-config | grep Port | awk '{ print $2 }'`
set :application, "twisted-ssh"
set :deploy_to, "/var/www/#{application}/#{stage}"
role :web, "localhost"
</code></p>

<p>Now run <code>cap vagrant deploy</code> to checkout the git repo into the correct location on the VM.</p>

<p>I'll be sure to add more info to this post over time, but this should provide a good jumping-off point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano and active_support get caddy]]></title>
    <link href="http://samkottler.com/blog/2012/04/09/capistrano-and-active-support-get-caddy/"/>
    <updated>2012-04-09T23:38:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/09/capistrano-and-active-support-get-caddy</id>
    <content type="html"><![CDATA[<p>I recently ran across the following output when running <code>cap web deploy:cleanup</code>.</p>

<p><code>``bash
/opt/ruby/lib/ruby/gems/1.8/gems/activesupport-3.1.2/lib/active_support/core_ext/kernel/reporting.rb:75:in</code>capture': (eval):1:in `capture': compile error (SyntaxError)
(eval):1: syntax error, unexpected tREGEXP_BEG, expecting kDO or '{' or '('
$ls -xt /ebs/staging/web/releases ...</p>

<pre><code>     ^
</code></pre>

<p>(eval):1: unknown regexp options - tagg
(eval):1: syntax error, unexpected tUMINUS, expecting kDO or '{' or '('
...aging/web/releases = LS -XT /EBS/STAGING/WEB/RELEA...</p>

<pre><code>                          ^
</code></pre>

<p>(eval):1: unknown regexp options - STAGING</p>

<pre><code>from /opt/ruby/lib/ruby/gems/1.8/gems/capistrano-2.11.2/lib/capistrano/recipes/deploy.rb:427:in `eval'
from /opt/ruby/lib/ruby/gems/1.8/gems/activesupport-3.1.2/lib/active_support/core_ext/kernel/reporting.rb:75:in `capture'
</code></pre>

<p>```</p>

<p>As it turns out, active_support hijacks the capture() method. Adding the following immediately after the last requirement in <code>deploy.rb</code> will override the overriden method.</p>

<p>```ruby deploy.rb
Capistrano::Configuration::Namespaces::Namespace.class_eval do
  def capture(*args)</p>

<pre><code>parent.capture *args
</code></pre>

<p>  end
end
```</p>

<p>Good to go! Running <code>cap web deploy:cleanup</code> works now.</p>
]]></content>
  </entry>
  
</feed>
