<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sam Kottler]]></title>
  <link href="http://samkottler.com/atom.xml" rel="self"/>
  <link href="http://samkottler.com/"/>
  <updated>2012-06-14T12:50:47-04:00</updated>
  <id>http://samkottler.com/</id>
  <author>
    <name><![CDATA[Sam Kottler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RAID 0 for MongoDB]]></title>
    <link href="http://samkottler.com/blog/2012/05/29/raid-0-for-mongodb/"/>
    <updated>2012-05-29T07:26:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/05/29/raid-0-for-mongodb</id>
    <content type="html"><![CDATA[<h3>Why?</h3>

<p>There are several reasons to setup a RAID 0 for MongoDB. At the most simple level, the Mongo data directory can often grow to be larger than the 1TB maximum size of an EBS volume. There are other benefits, though, like greatly improved random byte availability and increased throughput; both of these are important when running on EBS, which has notoriously bad disk I/O.</p>

<h3>How?</h3>

<p>We will be using 4 1TB drives to create a single 4TB RAID 0 disk for the MongoDB data directory. I am going to assume you&#8217;ve created the volumes and attached them to the running EC2 instance as /dev/sdg throughout /dev/sdj.</p>

<p>1) The mdadm package will help us to create the RAID array easily.</p>

<pre><code>apt-get install mdadm
</code></pre>

<p>2) Next, create the array at <code>/dev/md0</code> with the 4 EBS volumes.</p>

<pre><code>mdadm --create /dev/md0 --chunk=256 --level=0 --raid-devices=4 /dev/sdg /dev/sdh /dev/sdi /dev/sdj
</code></pre>

<p>3) Add the device (<code>/dev/md0</code>) to the mdadm config.</p>

<pre><code>echo DEVICE /dev/sdg /dev/sdh /dev/sdi /dev/sdj | tee /etc/mdadm/mdadm.conf
</code></pre>

<p>4) Load the device information into mdadm so that the array will be available if the instance gets rebooted.</p>

<pre><code>mdadm --detail --scan | sudo tee -a /etc/mdadm/mdadm.conf
</code></pre>

<p>5) Create the xfs filesystem. This may take a few minutes so be patient.</p>

<pre><code>mkfs.xfs /dev/md0
</code></pre>

<p>6) Create the MongoDB data directory.</p>

<pre><code>mkdir -p /etc/mongodb/db    
</code></pre>

<p>7) Add the RAID array to <code>/etc/fstab</code>.</p>

<pre><code>/dev/md0    /etc/mongodb/db    xfs    noatime,nodiratime,allocsize=512m      0       0
</code></pre>

<p>8) Mount the array at <code>/etc/mongodb/db</code>.</p>

<pre><code>mount /etc/mongodb/db
</code></pre>

<p>9) Change the DB path to use the array. In <code>mongo.conf</code>:</p>

<pre><code>dbpath = /etc/mongodb/db
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Tale of 31 Emails]]></title>
    <link href="http://samkottler.com/blog/2012/05/28/a-tale-of-31-emails/"/>
    <updated>2012-05-28T08:57:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/05/28/a-tale-of-31-emails</id>
    <content type="html"><![CDATA[<p>I&#8217;ve received 31 emails, 9 phone calls, 12 LinkedIn connection requests, and a text message over the past 7 days from technical recruiters. While some of these numbers are largely my own fault (i.e. my phone number was published publicly on LinkedIn), those numbers are truly obscene. They are even more aggregious when you take into consideration the fact that not a single one of the messages encouraged me to pursue opportunities presented. Part of that is because I&#8217;m incredibly happy at Venmo, but given the kind of companies I&#8217;m receiving communication from (Tumblr, Gilt Group, etc) it seems that at least <em>some</em> of them would be interesting enough to start a conversation.</p>

<h3>The Volume</h3>

<p>First off, the numbers alone are incredible.</p>

<p><strong>31 emails</strong>: not one of them went into my inbox. Every single email I received from a recruiter got archived and tagged. I look at these later, if at all.</p>

<p><strong>9 phone calls</strong>: 2 of which got answered. I generally ignore phone calls from numbers not in my address book. I&#8217;m not sure why I answered these two, but the conversation was short; I spent most of the time trying to get the recruiter to stop talking long enough so I could ask them to remove me from their system before I hung up.</p>

<p><strong>12 LinkedIn connection requests or messages</strong>: I mark these &#8220;appropriate, but not at this time&#8221; unless they are abusive in some way. I don&#8217;t read them and just ignore the request to connect.</p>

<p><strong>1 text message</strong>: I&#8217;ve been stalked by a recruiter for over three months. I&#8217;ve asked her repeatedly to stop contacting me. I&#8217;ve spoken to her boss and the company she is representing. All promised me results but none delivered them. She uses different numbers to text me and ask whether I&#8217;m interested in a position. I have over a dozen of her phone numbers blocked by my cell phone carrier.</p>

<h3>The Words</h3>

<blockquote><p>I am currently recruiting for a Senior Systems Engineer (Sr. UNIX/Linux Administrator) with either (Red Hat, MySQL or Puppet) experience for Example.com in New York City.</p></blockquote>

<p>Right after reading that line, I was confused. The fact that the recruiter listed these items separately, but later globs them together is concerning - it shows a clear lack of understanding about the systems being used at the company. Here&#8217;s the kicker:</p>

<blockquote><p>Rock Star candidates must have a strong (Java or Python) programming experience within a fast/heavy volume traffic environment to be able to keep up with the rest of this 100 plus technical team.</p></blockquote>

<p>This part seems to be blatantly wrong. I <em>think</em> was the recruiter intended to say is &#8220;Rock Star candidates must have a strong background in running systems built with Java or Python.&#8221; Again,another concerning sign about a lack of understanding.</p>

<p>Since when was the term &#8220;rock star&#8221; (which is BS anyhow) capitalized like a title? <strong>Red Flag</strong></p>

<h3>How It Should Be</h3>

<p>Stop having your recruiter email me. Frankly, I have little confidence in recruiters, even those working in house. Instead, have an engineer reach out to me. An engineer will be able to speak to me honestly and answer deeper questions in a more concrete manner than any technical recruiter. Come to an event where I&#8217;m speaking and approach me; I&#8217;d love to talk to you!</p>

<p>Stop bombarding me with bullshit that I filter out of my inbox and read periodically for a good laugh. Understand the positions you&#8217;re peddling and make a strong effort to convey the role in an accurate way. Most importantly, if you&#8217;re genuinely interested in having me work for you, make an effort to connect. Accurately convey the position and demonstrate a true interest in me. Stop referring to technical people as &#8220;assets&#8221; or &#8220;resources&#8221; and start talking about our experience, work, and how we can help the organizations you represent be technically and culturally better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Technical Debt]]></title>
    <link href="http://samkottler.com/blog/2012/05/26/managing-technical-debt/"/>
    <updated>2012-05-26T13:11:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/05/26/managing-technical-debt</id>
    <content type="html"><![CDATA[<p><strong>This document will probably be in a state of perpetual change as my
experiences change.</strong></p>

<p>At this point I&#8217;ve been involved with around half a dozen startups. Each
and every one has had unique challenges that made the work interesting.
That said, the most sweeping commonatility was technical debt. It&#8217;s
bound to happen given the kind of business and funding requirements
startups face. Here are some tips I&#8217;ve accrued over the past few years.</p>

<h3>1. Prevent debt</h3>

<p>Duh. This one should be obvious, but there is an interesting paradigm
where getting it done <strong>now</strong> suddendly becomes more important than
being able to improve the product or solution a short time from now.
Issues arise directly from the fact that some code is hacked together to
work as quickly as possible. Good technical managers know that being
able to add features down the road is just as important is shipping
today.</p>

<p>Finding an appropriate balance between well architected and factored
code is tough, though. It&#8217;s usually not as easy to make a judgement call
when the &#8220;hacky&#8221; option takes substantially less time than the elegant
one. Move to the next step for cases when a sub-par solution is
required.</p>

<h3>2. Document problems</h3>

<p>One of the most important parts of being able to manage problems
throughout large (and rapidly growing) codebases is being able to
quickly visualize and recognize areas where the solution is workable,
but less than ideal. This <em>shouldn&#8217;t</em> be &#8220;on line 37 there is a weird
use of ternaries&#8221;. That is easy to factor out quickly. Architectural
problems are more important to control; small changes usually are fixed
most easily by the work of diligent programmers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When deferrables can't be deferred]]></title>
    <link href="http://samkottler.com/blog/2012/04/22/when-deferrables-cant-be-deferred/"/>
    <updated>2012-04-22T14:44:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/22/when-deferrables-cant-be-deferred</id>
    <content type="html"><![CDATA[<p>I&#8217;m writing a microkernel in Python right now, which has led me to start exploring the way that other languages handle evented/concurrent programming. One of the most interesting projects doing this kind of thing is EventMachine. It&#8217;s written in Ruby and has some similarities to Twisted, so I figured I would read up on it. What I found was, well, bad.</p>

<p>The concept of deferable methods is great - they are asynchronously returned and do a great job at things like API calls to third-party services. Here&#8217;s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/ssh&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SSHWorker</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">EM</span><span class="o">::</span><span class="no">Deferrable</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ssh_work</span>
</span><span class='line'>    <span class="mi">20</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">ssh</span><span class="o">|</span>
</span><span class='line'>      <span class="no">Net</span><span class="o">::</span><span class="no">SSH</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="s1">&#39;host&#39;</span><span class="p">,</span> <span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="s2">&quot;password&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">ssh</span><span class="o">|</span>
</span><span class='line'>        <span class="n">output</span> <span class="o">=</span> <span class="n">ssh</span><span class="o">.</span><span class="n">exec!</span><span class="p">(</span><span class="s2">&quot;hostname&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">ssh</span><span class="o">.</span><span class="n">exec</span><span class="p">(</span><span class="s2">&quot;sed...&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">set_deferred_status</span> <span class="ss">:succeeded</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This kind of thing totally makes sense to defer. It&#8217;s impossible to know how long it will take to SSH into a machine over and over again. It would be really bad to block requests will SSH&#8217;ing into a machine 20 times.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">EM</span><span class="o">.</span><span class="n">run</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">worker</span> <span class="o">=</span> <span class="no">SSHWorker</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">worker</span><span class="o">.</span><span class="n">callback</span> <span class="p">{</span><span class="nb">p</span> <span class="s2">&quot;Ready to rock!&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span><span class="no">SSHWorker</span><span class="o">.</span><span class="n">ssh_work</span><span class="p">;</span> <span class="no">EM</span><span class="o">.</span><span class="n">stop</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the work is being done in a new thread. Great, we aren&#8217;t blocking anymore. But what about the front-end application that is your customers are viewing - does that rely on a successful response from the SSHWorker class in order to proceed? If it does, you&#8217;re doing it wrong. Front-to-back asynchronous request handling is hard so it&#8217;s key to be mindful of the fact that blocks don&#8217;t always come from the backend workers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying to Vagrant with Capistrano]]></title>
    <link href="http://samkottler.com/blog/2012/04/17/deploying-to-vagrant-with-capistrano/"/>
    <updated>2012-04-17T13:24:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/17/deploying-to-vagrant-with-capistrano</id>
    <content type="html"><![CDATA[<h6>@tizzo, @sdboyer, and I have been talking about building a Vagrant-based environment for people to build new features for Drupal.org in a distributed way. This post is intended to be an explanation of how to separate configuration from code that should get deployed.</h6>

<p>For the purposes of this post, I am going to assume that your Vagrant configuration is all set. We are going to build on top of it.</p>

<p>First, create a <code>Gemfile</code> in the root of your project. The capistrano gem is the base for our deployment tool, capistrano-ext provides multi-stage (vagrant dev staging production) capability, and the colors gem provided &#8220;colorized&#8221; output.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano-ext&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano_colors&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>bundle install</code>.</p>

<p>Next, make the directory that will contain your capistrano deployment config.</p>

<pre><code>capify .
</code></pre>

<p>The directory structure is now configured for use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  Capfile
</span><span class='line'>  config/
</span><span class='line'>    deploy.rb
</span></code></pre></td></tr></table></div></figure>


<p>Add the following to load support for multistage and define the stages:</p>

<figure class='code'><figcaption><span>deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:stages</span><span class="p">,</span> <span class="sx">%w(vagrant development staging production)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/ext/multistage&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Capistrano will be looking for a corresponding file in <code>config/deploy/#{name}.rb</code> for each stage. For example, <code>config/deploy/vagrant.rb</code> should contain the definitions and custom tasks for the vagrant stage.</p>

<figure class='code'><figcaption><span>vagrant.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span> <span class="s2">&quot;https://github.com/tizzo/Drupal.org-Git-Daemons.git&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:port</span><span class="p">,</span> <span class="sb">`vagrant ssh-config | grep Port | awk &#39;{ print $2 }&#39;`</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;twisted-ssh&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/var/www/</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">stage</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="s2">&quot;localhost&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run <code>cap vagrant deploy</code> to checkout the git repo into the correct location on the VM.</p>

<p>I&#8217;ll be sure to add more info to this post over time, but this should provide a good jumping-off point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using xcode-select to fix problems with Rubygem extension compilation]]></title>
    <link href="http://samkottler.com/blog/2012/04/14/using-xcode-select-to-fix-problems-with-rubygem-extension-compilation/"/>
    <updated>2012-04-14T10:49:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/14/using-xcode-select-to-fix-problems-with-rubygem-extension-compilation</id>
    <content type="html"><![CDATA[<p>I ran into an issue installing the rb-fsevent gem this morning. The native extension compilation would fail time and time again with output like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fsevent/fsevent_watch.c:1:10: fatal error: <span class="s1">&#39;stdio.h&#39;</span> file not found
</span><span class='line'><span class="c">#include &lt;stdio.h&gt;</span>
</span><span class='line'>         ^
</span><span class='line'>1 error generated.
</span><span class='line'>extconf.rb:59:in <span class="sb">`</span>&lt;main&gt;<span class="err">&#39;</span>: Compilation of fsevent_watch failed <span class="o">(</span>see README<span class="o">)</span> <span class="o">(</span>RuntimeError<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I haven&#8217;t written any C++ since I got my new laptop, so I assumed it was
an issue with Xcode&#8217;s developer path. llvm-g++ was in my path but g++
itself was not. Luckily, the fix for Xcode 4.3 users is easy!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting the most recent entries from a large log file]]></title>
    <link href="http://samkottler.com/blog/2012/04/12/reversing-a-text-file-with-tail/"/>
    <updated>2012-04-12T10:49:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/12/reversing-a-text-file-with-tail</id>
    <content type="html"><![CDATA[<p>I recently had the need to reverse a REALLY big text file before truncating it for analysis. It was 40GB, which is makes every operation done on it take a long time. Luckily, some simple bash made the process incredibily easy! I never knew <code>tail</code> has an option, <code>-r</code> that will spit out a reversed version of the input:</p>

<p><code>tail -r access.log &gt; reversed_access.log</code></p>

<p>From there, we can just use the plain old <code>truncate</code> command:</p>

<p><code>truncate -s 1000MB reversed_access.log</code></p>

<p><code>reversed_access.log</code> now contains a gig of the most recent entries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capistrano and active_support get caddy]]></title>
    <link href="http://samkottler.com/blog/2012/04/09/capistrano-and-active-support-get-caddy/"/>
    <updated>2012-04-09T23:38:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/09/capistrano-and-active-support-get-caddy</id>
    <content type="html"><![CDATA[<p>I recently ran across the following output when running <code>cap web deploy:cleanup</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/opt/ruby/lib/ruby/gems/1.8/gems/activesupport-3.1.2/lib/active_support/core_ext/kernel/reporting.rb:75:in <span class="sb">`</span>capture<span class="s1">&#39;: (eval):1:in `capture&#39;</span>: compile error <span class="o">(</span>SyntaxError<span class="o">)</span>
</span><span class='line'><span class="o">(</span><span class="nb">eval</span><span class="o">)</span>:1: syntax error, unexpected tREGEXP_BEG, expecting kDO or <span class="s1">&#39;{&#39;</span> or <span class="s1">&#39;(&#39;</span>
</span><span class='line'><span class="nv">$ls</span> -xt /ebs/staging/web/releases ...
</span><span class='line'>         ^
</span><span class='line'><span class="o">(</span><span class="nb">eval</span><span class="o">)</span>:1: unknown regexp options - tagg
</span><span class='line'><span class="o">(</span><span class="nb">eval</span><span class="o">)</span>:1: syntax error, unexpected tUMINUS, expecting kDO or <span class="s1">&#39;{&#39;</span> or <span class="s1">&#39;(&#39;</span>
</span><span class='line'>...aging/web/releases <span class="o">=</span> LS -XT /EBS/STAGING/WEB/RELEA...
</span><span class='line'>                              ^
</span><span class='line'><span class="o">(</span><span class="nb">eval</span><span class="o">)</span>:1: unknown regexp options - STAGING
</span><span class='line'>  from /opt/ruby/lib/ruby/gems/1.8/gems/capistrano-2.11.2/lib/capistrano/recipes/deploy.rb:427:in <span class="sb">`</span><span class="nb">eval</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1"> from /opt/ruby/lib/ruby/gems/1.8/gems/activesupport-3.1.2/lib/active_support/core_ext/kernel/reporting.rb:75:in `capture&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it turns out, active_support hijacks the capture() method. Adding the following immediately after the last requirement in <code>deploy.rb</code> will override the overriden method.</p>

<figure class='code'><figcaption><span>deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capistrano</span><span class="o">::</span><span class="no">Configuration</span><span class="o">::</span><span class="no">Namespaces</span><span class="o">::</span><span class="no">Namespace</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">capture</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parent</span><span class="o">.</span><span class="n">capture</span> <span class="o">*</span><span class="n">args</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Good to go! Running <code>cap web deploy:cleanup</code> works now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Brubeck and Quickness]]></title>
    <link href="http://samkottler.com/blog/2012/04/06/getting-started-with-brubeck-and-quickness/"/>
    <updated>2012-04-06T23:11:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/06/getting-started-with-brubeck-and-quickness</id>
    <content type="html"><![CDATA[<p>This post assumes that you already have <a href="http://github.com/mitchellh/vagrant">vagrant</a> installed.</p>

<p>Brubeck is a great Python web framework that is built atop Mongrel2, and hence ZeroMQ. It&#8217;s incredibly powerful, but a little tough to install if you don&#8217;t have experience compiling software. Thanks to a new project called <a href="http://github.com/j2labs/quickness">quickness</a> by the very awesome @j2labs, it&#8217;s now possible to easily configure an environment just waiting for you to rock some Brubeck!</p>

<p>Let&#8217;s get kickin&#8217;:</p>

<ol>
<li><code>git clone https://github.com/j2labs/quickness.git</code></li>
<li><code>cd quickness</code></li>
<li><code>vagrant up</code></li>
<li><code>vagrant ssh</code></li>
</ol>


<p>We&#8217;re now on our Ubuntu 10.04 64-bit VM. Quickness comes with a great little utility called <code>quick_install</code> to help compile and manage some great pieces of software, including Mongrel2, Nginx, MySQL, and ZeroMQ.</p>

<p>Run <code>quick_install brubeck</code> to install all of Brubeck&#8217;s dependencies and watch the magic happen.</p>

<p>We&#8217;re ready to go! Head over to <a href="http://brubeck.io/installing.html">the Brubeck installation page</a> to get started.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL Plugin installation for Munin]]></title>
    <link href="http://samkottler.com/blog/2012/04/05/mysql-plugin-installation-for-munin/"/>
    <updated>2012-04-05T02:03:00-04:00</updated>
    <id>http://samkottler.com/blog/2012/04/05/mysql-plugin-installation-for-munin</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
